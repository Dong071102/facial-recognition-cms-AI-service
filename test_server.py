import asyncio
import websockets
import base64
import cv2

PORT = 11000
IMG_PATH = "facebank/dong/2025-02-08-18-59-36.jpg"  # ƒê∆∞·ªùng d·∫´n ·∫£nh test
DELAY = 0.3  # delay gi·ªØa c√°c l·∫ßn g·ª≠i ·∫£nh

async def send_image(websocket):
    print(f"‚úÖ ESP32-S3 connected: {websocket.remote_address}")

    while True:
        try:
            # ƒê·ªçc ·∫£nh
            img = cv2.imread(IMG_PATH)
            if img is None:
                print("‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ·∫£nh.")
                break

            # Resize v·ªÅ 240x320
            img = cv2.resize(img, (240, 320))

            # M√£ h√≥a JPEG
            success, buffer = cv2.imencode('.jpg', img, [int(cv2.IMWRITE_JPEG_QUALITY), 50])
            if not success:
                print("‚ùå Kh√¥ng th·ªÉ m√£ h√≥a JPEG.")
                break

            # Base64 encode
            encoded = base64.b64encode(buffer).decode('utf-8')

            # G·ª≠i qua WebSocket
            await websocket.send(encoded)
            await asyncio.sleep(DELAY)

        except websockets.ConnectionClosed:
            print("üîå ESP32-S3 ƒë√£ ng·∫Øt k·∫øt n·ªëi.")
            break
        except Exception as e:
            print("‚ùå L·ªói khi g·ª≠i ·∫£nh:", e)
            break

async def main():
    print(f"üöÄ ƒêang m·ªü WebSocket server t·∫°i ws://0.0.0.0:{PORT}")
    async with websockets.serve(send_image, "0.0.0.0", PORT):
        await asyncio.Future()  # gi·ªØ server ch·∫°y

if __name__ == "__main__":
    asyncio.run(main())
